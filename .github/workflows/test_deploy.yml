name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: developerjamey/umc_aos
  EC2_HOST: ${{ secrets.EC2_URL }}
  EC2_SSH_USER: ubuntu
  PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  CONTAINER_NAME: umc_aos_container

jobs:
  build-and-push-docker:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub using Access Token
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest


  deploy-to-ec2:

    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Write YML secret files temporarily
        run: |
          echo "${{ secrets.APPLICATION_JWT }}" > application-jwt.yml
          echo "${{ secrets.APPLICATION_DATABASE }}" > application-database.yml

      - name: Copy YML files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          source: "application-*.yml"
          target: "/home/ubuntu/secrets"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_SSH_USER }}
          key: ${{ env.PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-8080")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            IMAGE_ID=$(sudo docker images -q ${{ env.DOCKER_IMAGE_NAME }})

            if [ ! -z "$IMAGE_ID" ]; then
              sudo docker rmi $IMAGE_ID
            fi

            sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}

            sudo docker run --name ${{ env.CONTAINER_NAME }} \
              -d -p 8080:8080 \
              -e TZ=Asia/Seoul \
              -v /home/ubuntu/secrets/application-jwt.yml:/app/resources/application-jwt.yml \
              -v /home/ubuntu/secrets/application-database.yml:/app/resources/application-database.yml \
              ${{ env.DOCKER_IMAGE_NAME }}

      - name: Clean up local secret files
        run: rm application-*.yml

